version: "3"

set: ['e', 'u', 'pipefail']
shopt: ['globstar']

tasks:
  list:
    desc: "List all VMs and container images"
    cmds:
      - tart list
    aliases:
      - ls

  pull:
    desc: "Pull a VM image"
    summary: |
      Usage:
        task tart:pull -- <vm-name>
    cmds:
      - tart pull {{.NAME}}
    vars:
      NAME: '{{.CLI_ARGS | default "ghcr.io/cirruslabs/ubuntu"}}'
    status:
      - |
        if tart list --source oci | grep -q "{{.NAME}}"; then
          echo "Image {{.NAME}} is already cached!"
        else
          tart pull {{.NAME}}
        fi

  clone:
    desc: "Clone a VM"
    summary: |
      Usage:
        task tart:clone -- <vm-name> <new-vm-name>
    cmds:
      - |
        if [[ -z "{{.CLI_ARGS}}" ]]; then
          tart clone --help
        else
          tart clone {{.CLI_ARGS}}
        fi

  run:
    desc: "Run a VM"
    summary: |
      Usage:
        task tart:run -- <vm-name>
    cmds:
      - |
        if [[ -z "{{.CLI_ARGS}}" ]]; then
          tart run --help
        else
          tart run {{.CLI_ARGS}} &
        fi
    status:
      - tart list | awk '/{{.CLI_ARGS}}/ {print $NF}' | grep -q "running"

  stop:
    desc: "Stop a VM"
    summary: |
      Usage:
        task tart:stop -- <vm-name>
    cmds:
      - |
        if [[ -z "{{.CLI_ARGS}}" ]]; then
          tart stop --help
        else
          tart stop {{.CLI_ARGS}}
        fi
    status:
      - tart list | awk '/{{.CLI_ARGS}}/ {print $NF}' | grep -q "stopped"

  delete:
    desc: "Delete a VM"
    summary: |
      Usage:
        task tart:delete -- <vm-name>
    cmds:
      - |
        if [[ -z "{{.CLI_ARGS}}" ]]; then
          tart delete --help
        else
          tart delete {{.CLI_ARGS}}
        fi
    status:
      - ! tart list | awk '/{{.CLI_ARGS}}/'
